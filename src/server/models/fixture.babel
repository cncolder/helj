/**
 * Fixture
 *
 * initialize database.
 */

import pkg from '../../package.json'
import env from '../lib/env'
import Configure from './configure'
import User from './user'
import Shop from './shop'
import Sample from './sample'
import Product from './product'
const log = require('../lib/debug')('app:models:fixture')


class Fixture {
  constructor(env) {
    this[env]()
  }

  common() {
    Promise.all([
      this.version(),
    ]).catch(() => {})
  }

  local() {
    Promise.all([
      this.sample(),
    ]).catch(() => {})
  }

  async version() {
    const cfg = await Configure.findOne({
      key: 'version',
    })
    if (!cfg) {
      await Configure.create({
        key: 'version',
        value: pkg.version
      })
    } else {
      if (cfg.version != pkg.version) {
        await cfg.update({
          value: pkg.version,
        })
      }
    }
  }

  async sample() {
    const sampleData = [{
      sku: 'xjdmg',
      name: '过足瘾小鸡炖蘑菇',
      desc: '好吃到要报警的原始美味',
      tags: ['和隆记能量饭'],
      cover: '/img/products/11.jpg',
      price: 18,
    }, {
      sku: 'glnr',
      name: '私家小厨咖喱牛腩',
      desc: '盖饭绝配的咖喱美味',
      tags: ['和隆记力荐', '和隆记能量饭'],
      cover: '/img/products/12.jpg',
      price: 20,
    }, {
      sku: 'cgr',
      name: '别和我抢拆骨肉',
      desc: '剔骨, 拆肉......\n好吃不用自己动手',
      tags: ['和隆记能量饭'],
      cover: '/img/products/13.jpg',
      price: 18,
    }, {
      sku: 'tslrf',
      name: '阿嬷的台式卤肉饭',
      desc: '一碗香喷喷的台湾味',
      tags: ['和隆记力荐', '和隆记能量饭'],
      cover: '/img/products/14.jpg',
      price: 20,
    }, ]
    let shop = await Shop.findOneAndUpdate({
      name: '和隆记金川街店',
    }, {
      name: '和隆记金川街店',
    }, {
      new: true,
      upsert: true,
    }, )
    let samples = await Promise.all(
      sampleData.map(data => Sample.findOneAndUpdate({
        sku: data.sku,
      }, data, {
        new: true,
        upsert: true,
      }, ))
    )

    let products = await Promise.all(
      samples.map(sample => Product.findOneAndUpdate({
        shop, sample,
      }, {
        shop, sample, price: 20,
      }, {
        new: true,
        upsert: true,
      }, ))
    )

    return await shop.update({
      products: products.map(product => product.id)
    })
  }

  development() {
    this.common()
    this.local()
  }

  staging() {
    this.common()
    this.local()
  }

  production() {
    this.common()
  }
}


try {
  new Fixture(env.env)
} catch (err) {
  log(err)
}
